// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./prisma/generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model appConfig {
  id           BigInt  @id @default(autoincrement())
  shippingCost BigInt
  status       Boolean
}

model emailConfig {
  id             BigInt   @id @default(autoincrement())
  panel          String
  module         String
  subject        String
  action         String
  html_template  String?   @db.LongText
  smtp_host      String
  smtp_secure    Boolean
  smtp_port      Int
  smtp_username  String
  smtp_password  String
  from_email     String
  from_name      String
  status         Boolean
  variables      Json?
  to             Json?
  cc             Json?
  bcc            Json?
  createdAt      DateTime @default(now())
  createdBy      Int?
  createdByRole  String?
  updatedAt      DateTime @updatedAt
  updatedBy      Int?
  updatedByRole  String?
  @@index([createdBy])
  @@index([updatedBy])
}

model admin {
  id                   Int         @id @default(autoincrement())
  profilePicture       String?     @db.LongText
  name                 String
  uniqeId              String      @unique
  username             String?     @unique
  website              String?
  email                String
  isEmailVerified      Boolean    @default(false)
  emailVerifiedAt      DateTime?
  referralCode         String?
  password             String
  role                 String      @default("admin")
  type                 String      @default("main")
  isVerified           Boolean    @default(false)
  verifiedAt           DateTime?
  status               String      @default("active")
  dateOfBirth          DateTime?
  phoneNumber          String?
  currentAddress       String?
  permanentAddress     String?
  permanentPostalCode  String?
  permanentCityId      BigInt?
  permanentStateId     BigInt?
  permanentCountryId   BigInt?
  pr_token             String?
  pr_expires_at        DateTime?
  pr_last_reset        DateTime?
  createdAt            DateTime  @default(now())
  createdBy            Int?
  createdByRole        String?
  updatedAt            DateTime  @updatedAt
  updatedBy            Int?
  updatedByRole        String?
  deletedAt            DateTime?
  deletedBy            Int?
  deletedByRole        String?

  permanentCity       city?       @relation(fields: [permanentCityId], references: [id], onDelete: SetNull)
  permanentState      state?      @relation(fields: [permanentStateId], references: [id], onDelete: SetNull)
  permanentCountry    country?    @relation(fields: [permanentCountryId], references: [id], onDelete: SetNull)

  orderItemsDropshipper orderItem[]           @relation("OrderItemToDropshipper")
  orderItemsSupplier    orderItem[]           @relation("OrderItemToSupplier")
  shopifyStores         shopifyStore[]        @relation
  staff                 adminStaff[]          @relation("AdminToStaff")
  companyDetail         companyDetail?        @relation("AdminToCompanyDetail", map: "admin_company_detail_fkey")
  bankAccount           bankAccount?          @relation("AdminToBankAccount", map: "admin_bank_account_fkey")
  supplierProducts      supplierProduct[]     @relation("SupplierProducts")
  dropshipperProducts   dropshipperProduct[]  @relation("DropshipperProducts")
  suppliedProducts      dropshipperProduct[]  @relation("SuppliedProducts")
  bankAccountChangeRequest bankAccountChangeRequest? @relation("AdminToBankAccountChangeRequest", map: "admin_bank_account_change_request_fkey")
  productVisibility     productSupplierVisibility[] @relation
  supplierProductVariants   supplierProductVariant[] @relation("AdminToSupplierProductVariant", map: "admin_supplier_product_variant_fkey")
  dropshipperProductVariants dropshipperProductVariant[] @relation("AdminToDropshipperProductVariant", map: "admin_dropshipper_product_variant_fkey")
  rtoInventories        rtoInventory[]        @relation("AdminToRtoInventory")
}

model shopifyStore {
  id              Int      @id @default(autoincrement())
  adminId         Int?
  name            String?
  logo            String?  @db.LongText
  shop            String   @unique
  accessToken     String?
  email           String?
  shopName        String?
  planName        String?
  country         String?
  shopOwner       String?
  domain          String?
  myshopifyDomain String?
  province        String?
  city            String?
  phone           String?
  currency        String?
  moneyFormat     String?
  timezone        String?
  createdAtShop   DateTime?
  userId          Int?
  verificationStatus Boolean    @default(true)
  status          Boolean    @default(true)
  createdAt       DateTime  @default(now())
  createdBy       Int?
  createdByRole   String?
  updatedAt       DateTime  @updatedAt
  updatedBy       Int?
  updatedByRole   String?
  deletedAt       DateTime?
  deletedBy       Int?
  deletedByRole   String?

  dropshipperProducts      dropshipperProduct[] @relation("ShopifyStoreRelation")
  admin                    admin?    @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model companyDetail {
  id                              Int       @id @default(autoincrement())
  adminId                         Int       @unique
  companyName                     String?
  brandName                       String?
  brandShortName                  String?
  billingAddress                  String?
  billingPincode                  String?
  billingCountryId                BigInt?
  billingCountry                  country?  @relation("CompanyCountryRelation", fields: [billingCountryId], references: [id], onDelete: SetNull)
  billingStateId                  BigInt?
  billingState                    state?    @relation("CompanyStateRelation", fields: [billingStateId], references: [id], onDelete: SetNull)
  billingCityId                   BigInt?
  billingCity                     city?     @relation("CompanyCityRelation", fields: [billingCityId], references: [id], onDelete: SetNull)
  businessType                    String?
  clientEntryType                 String?
  gstNumber                       String?
  companyPanNumber                String?
  companyPanCardName              String?     @db.LongText
  companyPanCardImage             String?     @db.LongText
  aadharNumber                    String?
  gstDocument                     String?
  panCardHolderName               String?
  aadharCardHolderName            String?
  panCardImage                    String?     @db.LongText
  aadharCardImage                 String?     @db.LongText
  additionalDocumentUpload        String?
  documentId                      String?
  documentName                    String?
  documentImage                   String?     @db.LongText
  createdAt                       DateTime  @default(now())
  createdBy                       Int?
  createdByRole                   String?
  updatedAt                       DateTime  @updatedAt
  updatedBy                       Int?
  updatedByRole                   String?
  deletedAt                       DateTime?
  deletedBy                       Int?
  deletedByRole                   String?
  admin                           admin      @relation(fields: [adminId], references: [id], onDelete: Cascade, name: "AdminToCompanyDetail", map: "admin_company_detail_fkey")
}

model bankAccount {
  id                              Int       @id @default(autoincrement())
  adminId                         Int       @unique
  accountHolderName               String
  accountNumber                   String
  bankName                        String
  bankBranch                      String
  accountType                     String
  ifscCode                        String
  cancelledChequeImage            String?   @db.LongText
  paymentMethod                   String?
  createdAt                       DateTime  @default(now())
  createdBy                       Int?
  createdByRole                   String?
  updatedAt                       DateTime  @updatedAt
  updatedBy                       Int?
  updatedByRole                   String?
  deletedAt                       DateTime?
  deletedBy                       Int?
  deletedByRole                   String?
  admin                           admin     @relation(fields: [adminId], references: [id], onDelete: Cascade, name: "AdminToBankAccount", map: "admin_bank_account_fkey")
  bankAccountChangeRequest       bankAccountChangeRequest? @relation
}

model bankAccountChangeRequest {
  id                     Int       @id @default(autoincrement())
  adminId                Int       @unique
  bankAccountId          Int?      @unique
  accountHolderName      String
  accountNumber          String
  bankName               String
  bankBranch             String
  accountType            String
  ifscCode               String
  cancelledChequeImage   String?   @db.LongText
  paymentMethod          String?
  status                 String    @default("pending")
  remarks                String?   @db.LongText
  createdAt              DateTime  @default(now())
  createdBy              Int?
  createdByRole          String?
  updatedAt              DateTime  @updatedAt
  updatedBy              Int?
  updatedByRole          String?
  deletedAt              DateTime?
  deletedBy              Int?
  deletedByRole          String?
  admin               admin     @relation(fields: [adminId], references: [id], onDelete: Cascade, name: "AdminToBankAccountChangeRequest", map: "admin_bank_account_change_request_fkey")
  bankAccount            bankAccount? @relation(fields: [bankAccountId], references: [id], onDelete: SetNull)
  @@index([adminId])
  @@index([bankAccountId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model adminStaff {
  id                   Int       @id @default(autoincrement())
  admin_id             Int
  profilePicture       String?   @db.LongText
  name                 String    
  email                String    @unique
  phoneNumber          String?
  currentAddress       String?
  permanentAddress     String?
  permanentPostalCode  String?
  permanentCityId      BigInt?
  permanentStateId     BigInt?
  permanentCountryId   BigInt?
  password             String
  role                 String    @default("admin")
  status               String    @default("active")
  pr_token             String?
  pr_expires_at        DateTime?
  pr_last_reset        DateTime?
  createdAt            DateTime  @default(now())
  createdBy            Int?
  createdByRole        String?
  updatedAt            DateTime  @updatedAt
  updatedBy            Int?
  updatedByRole        String?
  deletedAt            DateTime?
  deletedBy            Int?
  deletedByRole        String?
  permanentCity       city?       @relation(fields: [permanentCityId], references: [id], onDelete: SetNull)
  permanentState      state?      @relation(fields: [permanentStateId], references: [id], onDelete: SetNull)
  permanentCountry    country?    @relation(fields: [permanentCountryId], references: [id], onDelete: SetNull)
  admin               admin     @relation(fields: [admin_id], references: [id], onDelete: Cascade, name: "AdminToStaff")
  adminStaffPermissions adminStaffHasPermission[] @relation("AdminStaffToHasPermission")
}

model adminStaffPermission {
  id            Int       @id @default(autoincrement())
  panel         String
  module        String
  action        String
  status        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?
  adminStaffHasPermissions adminStaffHasPermission[] @relation("PermissionToHasPermission")
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model adminStaffHasPermission {
  id                    Int       @id @default(autoincrement())
  adminStaffId          Int
  adminStaffPermissionId Int
  createdAt             DateTime  @default(now())
  createdBy             Int?
  createdByRole         String?
  updatedAt             DateTime  @updatedAt
  updatedBy             Int?
  updatedByRole         String?
  deletedAt             DateTime?
  deletedBy             Int?
  deletedByRole         String?
  adminStaff            adminStaff @relation(fields: [adminStaffId], references: [id], onDelete: Cascade, name: "AdminStaffToHasPermission")
  permission            adminStaffPermission @relation(fields: [adminStaffPermissionId], references: [id], onDelete: Cascade, name: "PermissionToHasPermission")
  @@index([adminStaffId])
  @@index([adminStaffPermissionId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model globalPermission {
  id                              Int       @id @default(autoincrement())
  panel                           String
  module                          String
  action                          String
  status                          Boolean   @default(true)
  createdAt                       DateTime  @default(now())
  createdBy                       Int?
  createdByRole                   String?
  updatedAt                       DateTime  @updatedAt
  updatedBy                       Int?
  updatedByRole                   String?
  deletedAt                       DateTime?
  deletedBy                       Int?
  deletedByRole                   String?
}

model loginLog {
  id                      Int       @id @default(autoincrement())
  adminId                 Int
  adminRole               String
  action                  String
  response                String?
  ipv4                    String?
  ipv6                    String?
  internetServiceProvider String?
  clientInformation       String?
  userAgent               String?
  createdAt               DateTime  @default(now())
  createdBy               Int?
  createdByRole           String?
  updatedAt               DateTime  @updatedAt
  updatedBy               Int?
  updatedByRole           String?
  deletedAt               DateTime?
  deletedBy               Int?
  deletedByRole           String?
  @@index([adminId])
  @@index([adminRole])
  @@index([action])
  @@index([createdAt])
  @@index([deletedAt])
}

model activityLog {
  id                      Int       @id @default(autoincrement())
  adminId                 Int
  adminRole               String
  module                  String
  action                  String
  endpoint                String
  method                  String
  payload                 String?     @db.LongText
  response                String?     @db.LongText
  result                  Boolean
  data                    String?     @db.LongText
  ipv4                    String?
  ipv6                    String?
  internetServiceProvider String?
  clientInformation       String?
  userAgent               String?
  createdAt               DateTime   @default(now())
  createdBy               Int?
  createdByRole           String?
  updatedAt               DateTime   @updatedAt
  updatedBy               Int?
  updatedByRole           String?
  deletedAt               DateTime?
  deletedBy               Int?
  deletedByRole           String?
  @@index([adminId])
  @@index([adminRole])
  @@index([module])
  @@index([action])
  @@index([createdAt])
  @@index([deletedAt])
}

model country {
  id                    BigInt          @id @default(autoincrement())
  name                  String
  iso3                  String?
  iso2                  String?
  phonecode             String?
  currency              String?
  currencyName          String?
  currencySymbol        String?
  nationality           String?
  createdAt             DateTime        @default(now())
  createdBy             Int?
  createdByRole         String?
  updatedAt             DateTime        @updatedAt
  updatedBy             Int?
  updatedByRole         String?
  deletedAt             DateTime?
  deletedBy             Int?
  deletedByRole         String?
  states                state[]
  cities                city[]
  warehouses            warehouse[]
  highRtos              highRto[]
  admins                admin[]
  adminStaffs           adminStaff[]
  originProducts        product[]       @relation("OriginCountryRelation")
  shippingProducts      product[]       @relation("ShippingCountryRelation")
  shippingOrders        order[]         @relation("CountryShippingRelation")
  billingOrders         order[]         @relation("CountryBillingRelation")
  billingCompanyDetails companyDetail[] @relation("CompanyCountryRelation")
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model state {
  id              BigInt     @id @default(autoincrement())
  name            String
  countryId       BigInt
  iso2            String?
  type            String?
  createdAt       DateTime  @default(now())
  createdBy       Int?
  createdByRole   String?
  updatedAt       DateTime  @updatedAt
  updatedBy       Int?
  updatedByRole   String?
  deletedAt       DateTime?
  deletedBy       Int?
  deletedByRole   String?
  country         country    @relation(fields: [countryId], references: [id], onDelete: Cascade)
  cities          city[]
  warehouses      warehouse[]
  highRtos        highRto[]
  admins          admin[]
  adminStaffs     adminStaff[]
  shippingOrders  order[] @relation("StateShippingRelation")
  billingOrders   order[] @relation("StateBillingRelation")
  billingCompanyDetails companyDetail[] @relation("CompanyStateRelation")
  @@index([countryId])
}

model city {
  id              BigInt     @id @default(autoincrement())
  name            String
  stateId         BigInt
  countryId       BigInt
  createdAt       DateTime  @default(now())
  createdBy       Int?
  createdByRole   String?
  updatedAt       DateTime  @updatedAt
  updatedBy       Int?
  updatedByRole   String?
  deletedAt       DateTime?
  deletedBy       Int?
  deletedByRole   String?
  state           state      @relation(fields: [stateId], references: [id], onDelete: Cascade)
  country         country    @relation(fields: [countryId], references: [id], onDelete: Cascade)
  warehouses      warehouse[]
  highRtos        highRto[]
  admins          admin[]
  adminStaffs     adminStaff[]
  shippingOrders  order[]     @relation("CityShippingRelation")
  billingOrders   order[]     @relation("CityBillingRelation")
  billingCompanyDetails companyDetail[] @relation("CompanyCityRelation")
  @@index([stateId])
  @@index([countryId])
}

model warehouse {
  id              Int       @id @default(autoincrement())
  name            String
  slug            String    @unique
  gst_number      String
  contact_name    String
  contact_number  String
  address_line_1  String
  address_line_2  String?
  postal_code     String
  countryId       BigInt?
  stateId         BigInt?
  cityId          BigInt?
  country         country?    @relation(fields: [countryId], references: [id], onDelete: SetNull)
  state           state?      @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city            city?       @relation(fields: [cityId], references: [id], onDelete: SetNull)
  status          Boolean   @default(false)
  createdAt       DateTime  @default(now())
  createdBy       Int?
  createdByRole   String?
  updatedAt       DateTime  @updatedAt
  updatedBy       Int?
  updatedByRole   String?
  deletedAt       DateTime?
  deletedBy       Int?
  deletedByRole   String?
  @@index([countryId])
  @@index([stateId])
  @@index([cityId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model category {
  id                   Int              @id @default(autoincrement())
  name                 String
  slug                 String           @unique
  description          String?          @db.LongText
  image                String?          @db.LongText
  status               Boolean          @default(false)
  createdAt            DateTime         @default(now())
  createdBy            Int?
  createdByRole        String?
  updatedAt            DateTime         @updatedAt
  updatedBy            Int?
  updatedByRole        String?
  deletedAt            DateTime?
  deletedBy            Int?
  deletedByRole        String?
  products             product[]
  productRequests      productRequest[]
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model brand {
  id             Int       @id @default(autoincrement())
  name           String
  slug           String    @unique
  description    String?   @db.LongText
  image          String?   @db.LongText
  status         Boolean   @default(false)
  createdAt      DateTime  @default(now())
  createdBy      Int?
  createdByRole  String?
  updatedAt      DateTime  @updatedAt
  updatedBy      Int?
  updatedByRole  String?
  deletedAt      DateTime?
  deletedBy      Int?
  deletedByRole  String?
  products      product[]
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model productRequest {
  id                        Int             @id @default(autoincrement())
  name                      String
  categoryId                Int
  expectedPrice             Int?
  expectedDailyOrders       String?
  url                       String?         @db.LongText
  image                     String?         @db.LongText
  status                    Boolean         @default(true)
  createdAt                 DateTime        @default(now())
  createdBy                 Int?
  createdByRole             String?
  updatedAt                 DateTime        @updatedAt
  updatedBy                 Int?
  updatedByRole             String?
  deletedAt                 DateTime?
  deletedBy                 Int?
  deletedByRole             String?
  category                  category        @relation(fields: [categoryId], references: [id])
}

model product {
  id                              Int              @id @default(autoincrement())
  shippingOwlProductId            String           @unique
  categoryId                      Int
  name                            String
  slug                            String           @unique
  main_sku                        String           @unique
  description                     String?          @db.LongText
  tags                            Json?
  brandId                         Int
  originCountryId                 BigInt
  hsnCode                         String?
  taxRate                         Float?
  rtoAddress                      String?
  pickupAddress                   String?
  shippingCountryId               BigInt
  video_url                       String?          @db.LongText
  list_as                         String?
  shipping_time                   String?
  weight                          Float?
  package_length                  Float?
  package_width                   Float?
  package_height                  Float?
  chargeable_weight               Float?
  package_weight_image            String?          @db.LongText
  package_length_image            String?          @db.LongText
  package_width_image             String?          @db.LongText
  package_height_image            String?          @db.LongText
  product_detail_video            String?          @db.LongText
  training_guidance_video         String?          @db.LongText
  isVisibleToAll                  Boolean          @default(true)
  status                          Boolean          @default(true)
  isVarientExists                 Boolean          @default(true)
  createdAt                       DateTime         @default(now())
  createdBy                       Int?
  createdByRole                   String?
  updatedAt                       DateTime         @updatedAt
  updatedBy                       Int?
  updatedByRole                   String?
  deletedAt                       DateTime?
  deletedBy                       Int?
  deletedByRole                   String?
  category                        category         @relation(fields: [categoryId], references: [id])
  brand                           brand            @relation(fields: [brandId], references: [id])
  originCountry                   country          @relation("OriginCountryRelation", fields: [originCountryId], references: [id])
  shippingCountry                 country          @relation("ShippingCountryRelation", fields: [shippingCountryId], references: [id])
  variants                        productVariant[]
  supplierProducts                supplierProduct[]
  dropshipperProducts             dropshipperProduct[]
  supplierVisibility              productSupplierVisibility[]
  supplierProductVariants         supplierProductVariant[] @relation
  dropshipperProductVariants      dropshipperProductVariant[] @relation
  @@index([categoryId])
  @@index([brandId])
  @@index([originCountryId])
  @@index([shippingCountryId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model productVariant {
  id                        Int              @id @default(autoincrement())
  name                      String
  productId                 Int
  image                     String          @db.LongText
  color                     String
  model                     String
  sku                       String           @unique
  product_link              String?
  suggested_price           Float?
  createdAt                 DateTime         @default(now())
  createdBy                 Int?
  createdByRole             String?
  updatedAt                 DateTime         @updatedAt
  updatedBy                 Int?
  updatedByRole             String?
  deletedAt                 DateTime?
  deletedBy                 Int?
  deletedByRole             String?
  product                   product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplierProductVariants   supplierProductVariant[] @relation
  @@index([productId])
}

model productSupplierVisibility {
  id            Int       @id @default(autoincrement())
  productId     Int
  supplierId    Int
  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?
  product       product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplier      admin     @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  @@index([productId])
  @@index([supplierId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model courierCompany {
  id                   Int         @id @default(autoincrement())
  name                 String
  slug                 String      @unique
  code                 String?     @unique
  website              String?     @db.LongText
  email                String
  phoneNumber          String?
  flatShippingRate     Int?
  rtoCharges           Int?
  status               Boolean     @default(true)
  createdAt            DateTime    @default(now())
  createdBy            Int?
  createdByRole        String?
  updatedAt            DateTime    @updatedAt
  updatedBy            Int?
  updatedByRole        String?
  deletedAt            DateTime?
  deletedBy            Int?
  deletedByRole        String?
}

model highRto {
  id              Int       @id @default(autoincrement())
  pincode         String
  countryId       BigInt?
  stateId         BigInt?
  cityId          BigInt?
  country         country?    @relation(fields: [countryId], references: [id], onDelete: SetNull)
  state           state?      @relation(fields: [stateId], references: [id], onDelete: SetNull)
  city            city?       @relation(fields: [cityId], references: [id], onDelete: SetNull)
  status          Boolean   @default(false)
  createdAt       DateTime  @default(now())
  createdBy       Int?
  createdByRole   String?
  updatedAt       DateTime  @updatedAt
  updatedBy       Int?
  updatedByRole   String?
  deletedAt       DateTime?
  deletedBy       Int?
  deletedByRole   String?
  @@index([countryId])
  @@index([stateId])
  @@index([cityId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model badPincode {
  id              Int       @id @default(autoincrement())
  pincode         String
  status          Boolean   @default(false)
  createdAt       DateTime  @default(now())
  createdBy       Int?
  createdByRole   String?
  updatedAt       DateTime  @updatedAt
  updatedBy       Int?
  updatedByRole   String?
  deletedAt       DateTime?
  deletedBy       Int?
  deletedByRole   String?
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model goodPincode {
  id              Int       @id @default(autoincrement())
  pincode         String
  status          Boolean   @default(false)
  createdAt       DateTime  @default(now())
  createdBy       Int?
  createdByRole   String?
  updatedAt       DateTime  @updatedAt
  updatedBy       Int?
  updatedByRole   String?
  deletedAt       DateTime?
  deletedBy       Int?
  deletedByRole   String?
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model supplierProduct {
  id            Int       @id @default(autoincrement())
  supplierId    Int
  productId     Int
  status        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  createdBy     Int?
  createdByRole String?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  updatedByRole String?
  deletedAt     DateTime?
  deletedBy     Int?
  deletedByRole String?
  orderItems                      orderItem[]
  supplier                        admin     @relation("SupplierProducts", fields: [supplierId], references: [id], onDelete: Cascade)
  product                         product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  variants                        supplierProductVariant[]
  dropshipperProducts             dropshipperProduct[] @relation("SupplierProductRelation")
  dropshipperProductVariants      dropshipperProductVariant[] @relation
  @@index([supplierId])
  @@index([productId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model supplierProductVariant {
  id                Int       @id @default(autoincrement())
  supplierId        Int
  productId         Int
  productVariantId  Int
  supplierProductId Int
  price             Float
  stock             Int
  status            Boolean   @default(true)
  createdAt         DateTime  @default(now())
  createdBy         Int?
  createdByRole     String?
  updatedAt         DateTime  @updatedAt
  updatedBy         Int?
  updatedByRole     String?
  deletedAt         DateTime?
  deletedBy         Int?
  deletedByRole     String?
  orderItems                      orderItem[]
  supplier          admin                 @relation(fields: [supplierId], references: [id], onDelete: Cascade, name: "AdminToSupplierProductVariant", map: "admin_supplier_product_variant_fkey")
  product           product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant           productVariant?       @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  supplierProduct   supplierProduct       @relation(fields: [supplierProductId], references: [id], onDelete: Cascade)
  dropshipperVariants dropshipperProductVariant[] @relation("SupplierToDropshipperVariant")
  @@index([supplierId])
  @@index([productId])
  @@index([supplierProductId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model dropshipperProduct {
  id                Int       @id @default(autoincrement())
  shopifyProductId  String?
  shopifyStoreId    Int
  dropshipperId     Int
  supplierId        Int
  supplierProductId Int
  productId         Int
  status            Boolean   @default(true)
  createdAt         DateTime  @default(now())
  createdBy         Int?
  createdByRole     String?
  updatedAt         DateTime  @updatedAt
  updatedBy         Int?
  updatedByRole     String?
  deletedAt         DateTime?
  deletedBy         Int?
  deletedByRole     String?
  dropshipper       admin             @relation("DropshipperProducts", fields: [dropshipperId], references: [id], onDelete: Cascade)
  supplier          admin             @relation("SuppliedProducts", fields: [supplierId], references: [id], onDelete: Cascade)
  product           product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplierProduct   supplierProduct   @relation("SupplierProductRelation", fields: [supplierProductId], references: [id], onDelete: Cascade)
  shopifyStore      shopifyStore      @relation("ShopifyStoreRelation", fields: [shopifyStoreId], references: [id], onDelete: Cascade)
  variants          dropshipperProductVariant[]
  orderItems                      orderItem[]
  rtoInventories  rtoInventory[]   @relation("ProductToRtoInventory")
  @@index([dropshipperId])
  @@index([supplierId])
  @@index([productId])
  @@index([supplierProductId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model dropshipperProductVariant {
  id                Int       @id @default(autoincrement())
  dropshipperId     Int
  productId         Int
  supplierProductId Int
  dropshipperProductId Int
  supplierProductVariantId Int
  price             Float
  status            Boolean   @default(true)
  createdAt         DateTime  @default(now())
  createdBy         Int?
  createdByRole     String?
  updatedAt         DateTime  @updatedAt
  updatedBy         Int?
  updatedByRole     String?
  deletedAt         DateTime?
  deletedBy         Int?
  deletedByRole     String?
  dropshipper       admin             @relation(fields: [dropshipperId], references: [id], onDelete: Cascade, name: "AdminToDropshipperProductVariant", map: "admin_dropshipper_product_variant_fkey")
  product           product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplierProduct   supplierProduct   @relation(fields: [supplierProductId], references: [id], onDelete: Cascade)
  dropshipperProduct dropshipperProduct @relation(fields: [dropshipperProductId], references: [id], onDelete: Cascade)
  supplierProductVariant  supplierProductVariant @relation("SupplierToDropshipperVariant", fields: [supplierProductVariantId], references: [id], onDelete: Cascade)
  orderItems                orderItem[]
  rtoInventories  rtoInventory[]   @relation("VariantToRtoInventory")
  @@index([dropshipperId])
  @@index([productId])
  @@index([supplierProductId])
  @@index([dropshipperProductId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model payment {
  id              Int       @id @default(autoincrement())
  transactionId   String    @unique
  cycle           String?
  amount          Float?
  status          String?
  date            DateTime?
  createdAt       DateTime  @default(now())
  createdBy       Int?
  createdByRole   String?
  updatedAt       DateTime  @updatedAt
  updatedBy       Int?
  updatedByRole   String?
  deletedAt       DateTime?
  deletedBy       Int?
  deletedByRole   String?
  orders          order[]   @relation("OrderPayment")
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model order {
  id              Int       @id @default(autoincrement())
  orderNumber     String    @unique
  awbNumber      String?   @unique
  status          String    @default("pending")
  orderNote       String?
  subtotal        Float     @default(0.0)
  tax             Float     @default(0.0)
  discount        Float     @default(0.0)
  totalAmount     Float     @default(0.0)
  currency        String    @default("USD")
  shippingName            String
  shippingPhone           String
  shippingEmail           String
  shippingAddress         String
  shippingZip             String
  shippingCountryId       BigInt?
  shippingStateId         BigInt?
  shippingCityId          BigInt?
  shippingCountry country? @relation("CountryShippingRelation", fields: [shippingCountryId], references: [id], onDelete: SetNull)
  shippingState state? @relation("StateShippingRelation", fields: [shippingStateId], references: [id], onDelete: SetNull)
  shippingCity city? @relation("CityShippingRelation", fields: [shippingCityId], references: [id], onDelete: SetNull)
  billingName             String
  billingPhone            String
  billingEmail            String
  billingAddress          String
  billingZip              String
  billingCountryId        BigInt?
  billingStateId          BigInt?
  billingCityId           BigInt?
  billingCountry  country? @relation("CountryBillingRelation", fields: [billingCountryId], references: [id], onDelete: SetNull)
  billingState  state? @relation("StateBillingRelation", fields: [billingStateId], references: [id], onDelete: SetNull)
  billingCity  city? @relation("CityBillingRelation", fields: [billingCityId], references: [id], onDelete: SetNull)
  isPostpaid              Boolean   @default(false)
  paymentId               Int?     
  payment                 payment? @relation("OrderPayment", fields: [paymentId], references: [id], onDelete: SetNull)
  shippingApiResult       Json?
  barcodeImage            String?   @db.LongText
  delivered               Boolean   @default(false)
  deliveredDate           DateTime?
  rtoDelivered            Boolean   @default(false)
  rtoDeliveredDate        DateTime?
  lastRefreshAt           DateTime?

  disputeCase             Int?
  supplierRTOResponse     String?
  packingGallery          String?   @db.LongText
  unboxingGallery         String?   @db.LongText

  collectedAtWarehouse    DateTime?
  createdAt               DateTime  @default(now())
  createdBy               Int?
  createdByRole           String?
  updatedAt               DateTime  @updatedAt
  updatedBy               Int?
  updatedByRole           String?
  deletedAt               DateTime?
  deletedBy               Int?
  deletedByRole           String?
  items           orderItem[]
  rtoInventories  rtoInventory[]   @relation("OrderToRtoInventory")
  @@index([createdBy])
  @@index([updatedBy])
  @@index([deletedAt])
}

model orderItem {
  id            Int                  @id @default(autoincrement())
  orderId       Int
  dropshipperProductId     Int?
  dropshipperProductVariantId     Int?
  dropshipperId     Int?
  supplierProductId     Int?
  supplierProductVariantId     Int?
  supplierId     Int?
  quantity      Int
  price         Float
  total         Float

  order         order                            @relation(fields: [orderId], references: [id])
  dropshipperProduct       dropshipperProduct?              @relation(fields: [dropshipperProductId], references: [id], onDelete: SetNull)
  dropshipperVariant       dropshipperProductVariant?       @relation(fields: [dropshipperProductVariantId], references: [id], onDelete: SetNull)
  dropshipper       admin?       @relation("OrderItemToDropshipper", fields: [dropshipperId], references: [id], onDelete: SetNull)
  supplierProduct       supplierProduct?              @relation(fields: [supplierProductId], references: [id], onDelete: SetNull)
  supplierVariant       supplierProductVariant?       @relation(fields: [supplierProductVariantId], references: [id], onDelete: SetNull)
  supplier       admin?       @relation("OrderItemToSupplier", fields: [supplierId], references: [id], onDelete: SetNull)
  rtoInventories rtoInventory?        @relation("OrderItemToRtoInventory")
  @@index([orderId])
  @@index([dropshipperProductId])
  @@index([dropshipperProductVariantId])
}

model rtoInventory {
  id                          Int       @id @default(autoincrement())
  orderId                     Int
  orderItemId                 Int       @unique
  dropshipperId               Int
  dropshipperProductId        Int
  dropshipperProductVariantId Int
  quantity                    Int       @default(1)
  price                       Float     @default(0.0)
  createdAt                   DateTime  @default(now())
  createdBy                   Int?
  createdByRole               String?
  updatedAt                   DateTime  @updatedAt
  updatedBy                   Int?
  updatedByRole               String?
  deletedAt                   DateTime?
  deletedBy                   Int?
  deletedByRole               String?
  dropshipper               admin                     @relation("AdminToRtoInventory", fields: [dropshipperId], references: [id], onDelete: Cascade)
  order                     order                     @relation("OrderToRtoInventory", fields: [orderId], references: [id])
  orderItem                 orderItem                 @relation("OrderItemToRtoInventory", fields: [orderItemId], references: [id])
  dropshipperProduct        dropshipperProduct        @relation("ProductToRtoInventory", fields: [dropshipperProductId], references: [id])
  dropshipperProductVariant dropshipperProductVariant @relation("VariantToRtoInventory", fields: [dropshipperProductVariantId], references: [id])
  @@index([orderId])
  @@index([dropshipperId])
  @@index([dropshipperProductId])
  @@index([dropshipperProductVariantId])
  @@index([deletedAt])
}

model supplierOrderPermission {
  id              Int     @id @default(autoincrement())
  orderNumber     Boolean @default(false)
  awbNumber       Boolean @default(false)
  status          Boolean @default(false)
  orderNote       Boolean @default(false)
  subtotal        Boolean @default(false)
  tax             Boolean @default(false)
  discount        Boolean @default(false)
  totalAmount     Boolean @default(false)
  currency        Boolean @default(false)
  shippingName    Boolean @default(false)
  shippingPhone   Boolean @default(false)
  shippingEmail   Boolean @default(false)
  shippingAddress Boolean @default(false)
  shippingZip     Boolean @default(false)
  shippingCountry Boolean @default(false)
  shippingState   Boolean @default(false)
  shippingCity    Boolean @default(false)
  billingName     Boolean @default(false)
  billingPhone    Boolean @default(false)
  billingEmail    Boolean @default(false)
  billingAddress  Boolean @default(false)
  billingZip      Boolean @default(false)
  billingCountry  Boolean @default(false)
  billingState    Boolean @default(false)
  billingCity     Boolean @default(false)
}

/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AppConfigScalarFieldEnum = {
  id: 'id',
  shippingCost: 'shippingCost',
  status: 'status'
};

exports.Prisma.EmailConfigScalarFieldEnum = {
  id: 'id',
  panel: 'panel',
  module: 'module',
  subject: 'subject',
  action: 'action',
  html_template: 'html_template',
  smtp_host: 'smtp_host',
  smtp_secure: 'smtp_secure',
  smtp_port: 'smtp_port',
  smtp_username: 'smtp_username',
  smtp_password: 'smtp_password',
  from_email: 'from_email',
  from_name: 'from_name',
  status: 'status',
  variables: 'variables',
  to: 'to',
  cc: 'cc',
  bcc: 'bcc',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  profilePicture: 'profilePicture',
  name: 'name',
  uniqeId: 'uniqeId',
  username: 'username',
  website: 'website',
  email: 'email',
  isEmailVerified: 'isEmailVerified',
  emailVerifiedAt: 'emailVerifiedAt',
  referralCode: 'referralCode',
  password: 'password',
  role: 'role',
  type: 'type',
  isVerified: 'isVerified',
  verifiedAt: 'verifiedAt',
  status: 'status',
  dateOfBirth: 'dateOfBirth',
  phoneNumber: 'phoneNumber',
  currentAddress: 'currentAddress',
  permanentAddress: 'permanentAddress',
  permanentPostalCode: 'permanentPostalCode',
  permanentCityId: 'permanentCityId',
  permanentStateId: 'permanentStateId',
  permanentCountryId: 'permanentCountryId',
  pr_token: 'pr_token',
  pr_expires_at: 'pr_expires_at',
  pr_last_reset: 'pr_last_reset',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.ShopifyStoreScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  name: 'name',
  logo: 'logo',
  shop: 'shop',
  accessToken: 'accessToken',
  email: 'email',
  shopName: 'shopName',
  planName: 'planName',
  country: 'country',
  shopOwner: 'shopOwner',
  domain: 'domain',
  myshopifyDomain: 'myshopifyDomain',
  province: 'province',
  city: 'city',
  phone: 'phone',
  currency: 'currency',
  moneyFormat: 'moneyFormat',
  timezone: 'timezone',
  createdAtShop: 'createdAtShop',
  userId: 'userId',
  verificationStatus: 'verificationStatus',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.CompanyDetailScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  companyName: 'companyName',
  brandName: 'brandName',
  brandShortName: 'brandShortName',
  billingAddress: 'billingAddress',
  billingPincode: 'billingPincode',
  billingCountryId: 'billingCountryId',
  billingStateId: 'billingStateId',
  billingCityId: 'billingCityId',
  businessType: 'businessType',
  clientEntryType: 'clientEntryType',
  gstNumber: 'gstNumber',
  companyPanNumber: 'companyPanNumber',
  companyPanCardName: 'companyPanCardName',
  companyPanCardImage: 'companyPanCardImage',
  aadharNumber: 'aadharNumber',
  gstDocument: 'gstDocument',
  panCardHolderName: 'panCardHolderName',
  aadharCardHolderName: 'aadharCardHolderName',
  panCardImage: 'panCardImage',
  aadharCardImage: 'aadharCardImage',
  additionalDocumentUpload: 'additionalDocumentUpload',
  documentId: 'documentId',
  documentName: 'documentName',
  documentImage: 'documentImage',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.BankAccountScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  accountHolderName: 'accountHolderName',
  accountNumber: 'accountNumber',
  bankName: 'bankName',
  bankBranch: 'bankBranch',
  accountType: 'accountType',
  ifscCode: 'ifscCode',
  cancelledChequeImage: 'cancelledChequeImage',
  paymentMethod: 'paymentMethod',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.BankAccountChangeRequestScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  bankAccountId: 'bankAccountId',
  accountHolderName: 'accountHolderName',
  accountNumber: 'accountNumber',
  bankName: 'bankName',
  bankBranch: 'bankBranch',
  accountType: 'accountType',
  ifscCode: 'ifscCode',
  cancelledChequeImage: 'cancelledChequeImage',
  paymentMethod: 'paymentMethod',
  status: 'status',
  remarks: 'remarks',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  adminId: 'adminId',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.AdminStaffScalarFieldEnum = {
  id: 'id',
  admin_id: 'admin_id',
  roleId: 'roleId',
  panel: 'panel',
  profilePicture: 'profilePicture',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber',
  currentAddress: 'currentAddress',
  permanentAddress: 'permanentAddress',
  permanentPostalCode: 'permanentPostalCode',
  permanentCityId: 'permanentCityId',
  permanentStateId: 'permanentStateId',
  permanentCountryId: 'permanentCountryId',
  password: 'password',
  status: 'status',
  pr_token: 'pr_token',
  pr_expires_at: 'pr_expires_at',
  pr_last_reset: 'pr_last_reset',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  id: 'id',
  panel: 'panel',
  module: 'module',
  action: 'action',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.RoleHasPermissionScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  rolePermissionId: 'rolePermissionId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.GlobalPermissionScalarFieldEnum = {
  id: 'id',
  panel: 'panel',
  module: 'module',
  action: 'action',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.LoginLogScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  adminRole: 'adminRole',
  action: 'action',
  response: 'response',
  ipv4: 'ipv4',
  ipv6: 'ipv6',
  internetServiceProvider: 'internetServiceProvider',
  clientInformation: 'clientInformation',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  adminRole: 'adminRole',
  module: 'module',
  action: 'action',
  endpoint: 'endpoint',
  method: 'method',
  payload: 'payload',
  response: 'response',
  result: 'result',
  data: 'data',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  ispInfo: 'ispInfo',
  deviceInfo: 'deviceInfo',
  createdAt: 'createdAt'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  iso3: 'iso3',
  iso2: 'iso2',
  phonecode: 'phonecode',
  currency: 'currency',
  currencyName: 'currencyName',
  currencySymbol: 'currencySymbol',
  nationality: 'nationality',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.StateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  countryId: 'countryId',
  iso2: 'iso2',
  type: 'type',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.CityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  stateId: 'stateId',
  countryId: 'countryId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.WarehouseScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  gst_number: 'gst_number',
  contact_name: 'contact_name',
  contact_number: 'contact_number',
  address_line_1: 'address_line_1',
  address_line_2: 'address_line_2',
  postal_code: 'postal_code',
  countryId: 'countryId',
  stateId: 'stateId',
  cityId: 'cityId',
  supplierId: 'supplierId',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  image: 'image',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.BrandScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  image: 'image',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.ProductRequestScalarFieldEnum = {
  id: 'id',
  name: 'name',
  categoryId: 'categoryId',
  expectedPrice: 'expectedPrice',
  expectedDailyOrders: 'expectedDailyOrders',
  url: 'url',
  image: 'image',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  shippingOwlProductId: 'shippingOwlProductId',
  categoryId: 'categoryId',
  name: 'name',
  slug: 'slug',
  main_sku: 'main_sku',
  description: 'description',
  gallery: 'gallery',
  imageSortingIndex: 'imageSortingIndex',
  tags: 'tags',
  brandId: 'brandId',
  originCountryId: 'originCountryId',
  hsnCode: 'hsnCode',
  taxRate: 'taxRate',
  rtoAddress: 'rtoAddress',
  pickupAddress: 'pickupAddress',
  shippingCountryId: 'shippingCountryId',
  video_url: 'video_url',
  list_as: 'list_as',
  shipping_time: 'shipping_time',
  weight: 'weight',
  package_length: 'package_length',
  package_width: 'package_width',
  package_height: 'package_height',
  chargeable_weight: 'chargeable_weight',
  package_weight_image: 'package_weight_image',
  package_length_image: 'package_length_image',
  package_width_image: 'package_width_image',
  package_height_image: 'package_height_image',
  product_detail_video: 'product_detail_video',
  training_guidance_video: 'training_guidance_video',
  isVisibleToAll: 'isVisibleToAll',
  status: 'status',
  isVarientExists: 'isVarientExists',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.ProductVariantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  productId: 'productId',
  color: 'color',
  model: 'model',
  sku: 'sku',
  product_link: 'product_link',
  suggested_price: 'suggested_price',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.ProductSupplierVisibilityScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  supplierId: 'supplierId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.CourierCompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  code: 'code',
  website: 'website',
  email: 'email',
  phoneNumber: 'phoneNumber',
  flatShippingRate: 'flatShippingRate',
  rtoCharges: 'rtoCharges',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.HighRtoScalarFieldEnum = {
  id: 'id',
  pincode: 'pincode',
  countryId: 'countryId',
  stateId: 'stateId',
  cityId: 'cityId',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.BadPincodeScalarFieldEnum = {
  id: 'id',
  pincode: 'pincode',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.GoodPincodeScalarFieldEnum = {
  id: 'id',
  pincode: 'pincode',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.SupplierProductScalarFieldEnum = {
  id: 'id',
  supplierId: 'supplierId',
  productId: 'productId',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.SupplierProductVariantScalarFieldEnum = {
  id: 'id',
  supplierId: 'supplierId',
  productId: 'productId',
  productVariantId: 'productVariantId',
  supplierProductId: 'supplierProductId',
  price: 'price',
  stock: 'stock',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.DropshipperProductScalarFieldEnum = {
  id: 'id',
  shopifyProductId: 'shopifyProductId',
  shopifyStoreId: 'shopifyStoreId',
  dropshipperId: 'dropshipperId',
  supplierId: 'supplierId',
  supplierProductId: 'supplierProductId',
  productId: 'productId',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.DropshipperProductVariantScalarFieldEnum = {
  id: 'id',
  dropshipperId: 'dropshipperId',
  productId: 'productId',
  supplierProductId: 'supplierProductId',
  dropshipperProductId: 'dropshipperProductId',
  supplierProductVariantId: 'supplierProductVariantId',
  price: 'price',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  cycle: 'cycle',
  amount: 'amount',
  status: 'status',
  date: 'date',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  awbNumber: 'awbNumber',
  status: 'status',
  orderNote: 'orderNote',
  subtotal: 'subtotal',
  tax: 'tax',
  discount: 'discount',
  totalAmount: 'totalAmount',
  currency: 'currency',
  shippingName: 'shippingName',
  shippingPhone: 'shippingPhone',
  shippingEmail: 'shippingEmail',
  shippingAddress: 'shippingAddress',
  shippingZip: 'shippingZip',
  shippingCountryId: 'shippingCountryId',
  shippingStateId: 'shippingStateId',
  shippingCityId: 'shippingCityId',
  billingName: 'billingName',
  billingPhone: 'billingPhone',
  billingEmail: 'billingEmail',
  billingAddress: 'billingAddress',
  billingZip: 'billingZip',
  billingCountryId: 'billingCountryId',
  billingStateId: 'billingStateId',
  billingCityId: 'billingCityId',
  isPostpaid: 'isPostpaid',
  paymentId: 'paymentId',
  shippingApiResult: 'shippingApiResult',
  barcodeImage: 'barcodeImage',
  delivered: 'delivered',
  deliveredDate: 'deliveredDate',
  rtoDelivered: 'rtoDelivered',
  rtoDeliveredDate: 'rtoDeliveredDate',
  lastRefreshAt: 'lastRefreshAt',
  disputeCase: 'disputeCase',
  supplierRTOResponse: 'supplierRTOResponse',
  packingGallery: 'packingGallery',
  unboxingGallery: 'unboxingGallery',
  collectedAtWarehouse: 'collectedAtWarehouse',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  dropshipperProductId: 'dropshipperProductId',
  dropshipperProductVariantId: 'dropshipperProductVariantId',
  dropshipperId: 'dropshipperId',
  supplierProductId: 'supplierProductId',
  supplierProductVariantId: 'supplierProductVariantId',
  supplierId: 'supplierId',
  quantity: 'quantity',
  price: 'price',
  total: 'total'
};

exports.Prisma.RtoInventoryScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  orderItemId: 'orderItemId',
  dropshipperId: 'dropshipperId',
  dropshipperProductId: 'dropshipperProductId',
  dropshipperProductVariantId: 'dropshipperProductVariantId',
  quantity: 'quantity',
  price: 'price',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.SupplierOrderPermissionScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  awbNumber: 'awbNumber',
  status: 'status',
  orderNote: 'orderNote',
  subtotal: 'subtotal',
  tax: 'tax',
  discount: 'discount',
  totalAmount: 'totalAmount',
  currency: 'currency',
  shippingName: 'shippingName',
  shippingPhone: 'shippingPhone',
  shippingEmail: 'shippingEmail',
  shippingAddress: 'shippingAddress',
  shippingZip: 'shippingZip',
  shippingCountry: 'shippingCountry',
  shippingState: 'shippingState',
  shippingCity: 'shippingCity',
  billingName: 'billingName',
  billingPhone: 'billingPhone',
  billingEmail: 'billingEmail',
  billingAddress: 'billingAddress',
  billingZip: 'billingZip',
  billingCountry: 'billingCountry',
  billingState: 'billingState',
  billingCity: 'billingCity'
};

exports.Prisma.RaiseTicketScalarFieldEnum = {
  id: 'id',
  dropshipperId: 'dropshipperId',
  ticketNumber: 'ticketNumber',
  description: 'description',
  gallery: 'gallery',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole',
  responseBy: 'responseBy',
  responseAt: 'responseAt',
  responseByRole: 'responseByRole'
};

exports.Prisma.TicketOrderScalarFieldEnum = {
  id: 'id',
  raiseTicketId: 'raiseTicketId',
  orderId: 'orderId',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.DropshipperBannerScalarFieldEnum = {
  id: 'id',
  image: 'image',
  url: 'url',
  status: 'status',
  createdAt: 'createdAt',
  createdBy: 'createdBy',
  createdByRole: 'createdByRole',
  updatedAt: 'updatedAt',
  updatedBy: 'updatedBy',
  updatedByRole: 'updatedByRole',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.emailConfigOrderByRelevanceFieldEnum = {
  panel: 'panel',
  module: 'module',
  subject: 'subject',
  action: 'action',
  html_template: 'html_template',
  smtp_host: 'smtp_host',
  smtp_username: 'smtp_username',
  smtp_password: 'smtp_password',
  from_email: 'from_email',
  from_name: 'from_name',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole'
};

exports.Prisma.adminOrderByRelevanceFieldEnum = {
  profilePicture: 'profilePicture',
  name: 'name',
  uniqeId: 'uniqeId',
  username: 'username',
  website: 'website',
  email: 'email',
  referralCode: 'referralCode',
  password: 'password',
  role: 'role',
  type: 'type',
  status: 'status',
  phoneNumber: 'phoneNumber',
  currentAddress: 'currentAddress',
  permanentAddress: 'permanentAddress',
  permanentPostalCode: 'permanentPostalCode',
  pr_token: 'pr_token',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.shopifyStoreOrderByRelevanceFieldEnum = {
  name: 'name',
  logo: 'logo',
  shop: 'shop',
  accessToken: 'accessToken',
  email: 'email',
  shopName: 'shopName',
  planName: 'planName',
  country: 'country',
  shopOwner: 'shopOwner',
  domain: 'domain',
  myshopifyDomain: 'myshopifyDomain',
  province: 'province',
  city: 'city',
  phone: 'phone',
  currency: 'currency',
  moneyFormat: 'moneyFormat',
  timezone: 'timezone',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.companyDetailOrderByRelevanceFieldEnum = {
  companyName: 'companyName',
  brandName: 'brandName',
  brandShortName: 'brandShortName',
  billingAddress: 'billingAddress',
  billingPincode: 'billingPincode',
  businessType: 'businessType',
  clientEntryType: 'clientEntryType',
  gstNumber: 'gstNumber',
  companyPanNumber: 'companyPanNumber',
  companyPanCardName: 'companyPanCardName',
  companyPanCardImage: 'companyPanCardImage',
  aadharNumber: 'aadharNumber',
  gstDocument: 'gstDocument',
  panCardHolderName: 'panCardHolderName',
  aadharCardHolderName: 'aadharCardHolderName',
  panCardImage: 'panCardImage',
  aadharCardImage: 'aadharCardImage',
  additionalDocumentUpload: 'additionalDocumentUpload',
  documentId: 'documentId',
  documentName: 'documentName',
  documentImage: 'documentImage',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.bankAccountOrderByRelevanceFieldEnum = {
  accountHolderName: 'accountHolderName',
  accountNumber: 'accountNumber',
  bankName: 'bankName',
  bankBranch: 'bankBranch',
  accountType: 'accountType',
  ifscCode: 'ifscCode',
  cancelledChequeImage: 'cancelledChequeImage',
  paymentMethod: 'paymentMethod',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.bankAccountChangeRequestOrderByRelevanceFieldEnum = {
  accountHolderName: 'accountHolderName',
  accountNumber: 'accountNumber',
  bankName: 'bankName',
  bankBranch: 'bankBranch',
  accountType: 'accountType',
  ifscCode: 'ifscCode',
  cancelledChequeImage: 'cancelledChequeImage',
  paymentMethod: 'paymentMethod',
  status: 'status',
  remarks: 'remarks',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.roleOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.adminStaffOrderByRelevanceFieldEnum = {
  panel: 'panel',
  profilePicture: 'profilePicture',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber',
  currentAddress: 'currentAddress',
  permanentAddress: 'permanentAddress',
  permanentPostalCode: 'permanentPostalCode',
  password: 'password',
  status: 'status',
  pr_token: 'pr_token',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.rolePermissionOrderByRelevanceFieldEnum = {
  panel: 'panel',
  module: 'module',
  action: 'action',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.roleHasPermissionOrderByRelevanceFieldEnum = {
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.globalPermissionOrderByRelevanceFieldEnum = {
  panel: 'panel',
  module: 'module',
  action: 'action',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.loginLogOrderByRelevanceFieldEnum = {
  adminRole: 'adminRole',
  action: 'action',
  response: 'response',
  ipv4: 'ipv4',
  ipv6: 'ipv6',
  internetServiceProvider: 'internetServiceProvider',
  clientInformation: 'clientInformation',
  userAgent: 'userAgent',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.activityLogOrderByRelevanceFieldEnum = {
  adminRole: 'adminRole',
  module: 'module',
  action: 'action',
  endpoint: 'endpoint',
  method: 'method',
  payload: 'payload',
  response: 'response',
  data: 'data',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  ispInfo: 'ispInfo',
  deviceInfo: 'deviceInfo'
};

exports.Prisma.countryOrderByRelevanceFieldEnum = {
  name: 'name',
  iso3: 'iso3',
  iso2: 'iso2',
  phonecode: 'phonecode',
  currency: 'currency',
  currencyName: 'currencyName',
  currencySymbol: 'currencySymbol',
  nationality: 'nationality',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.stateOrderByRelevanceFieldEnum = {
  name: 'name',
  iso2: 'iso2',
  type: 'type',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.cityOrderByRelevanceFieldEnum = {
  name: 'name',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.warehouseOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug',
  gst_number: 'gst_number',
  contact_name: 'contact_name',
  contact_number: 'contact_number',
  address_line_1: 'address_line_1',
  address_line_2: 'address_line_2',
  postal_code: 'postal_code',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.categoryOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug',
  description: 'description',
  image: 'image',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.brandOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug',
  description: 'description',
  image: 'image',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.productRequestOrderByRelevanceFieldEnum = {
  name: 'name',
  expectedDailyOrders: 'expectedDailyOrders',
  url: 'url',
  image: 'image',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.productOrderByRelevanceFieldEnum = {
  shippingOwlProductId: 'shippingOwlProductId',
  name: 'name',
  slug: 'slug',
  main_sku: 'main_sku',
  description: 'description',
  gallery: 'gallery',
  hsnCode: 'hsnCode',
  rtoAddress: 'rtoAddress',
  pickupAddress: 'pickupAddress',
  video_url: 'video_url',
  list_as: 'list_as',
  shipping_time: 'shipping_time',
  package_weight_image: 'package_weight_image',
  package_length_image: 'package_length_image',
  package_width_image: 'package_width_image',
  package_height_image: 'package_height_image',
  product_detail_video: 'product_detail_video',
  training_guidance_video: 'training_guidance_video',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.productVariantOrderByRelevanceFieldEnum = {
  name: 'name',
  color: 'color',
  model: 'model',
  sku: 'sku',
  product_link: 'product_link',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.productSupplierVisibilityOrderByRelevanceFieldEnum = {
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.courierCompanyOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug',
  code: 'code',
  website: 'website',
  email: 'email',
  phoneNumber: 'phoneNumber',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.highRtoOrderByRelevanceFieldEnum = {
  pincode: 'pincode',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.badPincodeOrderByRelevanceFieldEnum = {
  pincode: 'pincode',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.goodPincodeOrderByRelevanceFieldEnum = {
  pincode: 'pincode',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.supplierProductOrderByRelevanceFieldEnum = {
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.supplierProductVariantOrderByRelevanceFieldEnum = {
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.dropshipperProductOrderByRelevanceFieldEnum = {
  shopifyProductId: 'shopifyProductId',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.dropshipperProductVariantOrderByRelevanceFieldEnum = {
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.paymentOrderByRelevanceFieldEnum = {
  transactionId: 'transactionId',
  cycle: 'cycle',
  status: 'status',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.orderOrderByRelevanceFieldEnum = {
  orderNumber: 'orderNumber',
  awbNumber: 'awbNumber',
  status: 'status',
  orderNote: 'orderNote',
  currency: 'currency',
  shippingName: 'shippingName',
  shippingPhone: 'shippingPhone',
  shippingEmail: 'shippingEmail',
  shippingAddress: 'shippingAddress',
  shippingZip: 'shippingZip',
  billingName: 'billingName',
  billingPhone: 'billingPhone',
  billingEmail: 'billingEmail',
  billingAddress: 'billingAddress',
  billingZip: 'billingZip',
  barcodeImage: 'barcodeImage',
  supplierRTOResponse: 'supplierRTOResponse',
  packingGallery: 'packingGallery',
  unboxingGallery: 'unboxingGallery',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.rtoInventoryOrderByRelevanceFieldEnum = {
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.raiseTicketOrderByRelevanceFieldEnum = {
  ticketNumber: 'ticketNumber',
  description: 'description',
  gallery: 'gallery',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole',
  responseByRole: 'responseByRole'
};

exports.Prisma.ticketOrderOrderByRelevanceFieldEnum = {
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};

exports.Prisma.dropshipperBannerOrderByRelevanceFieldEnum = {
  image: 'image',
  url: 'url',
  createdByRole: 'createdByRole',
  updatedByRole: 'updatedByRole',
  deletedByRole: 'deletedByRole'
};


exports.Prisma.ModelName = {
  appConfig: 'appConfig',
  emailConfig: 'emailConfig',
  admin: 'admin',
  shopifyStore: 'shopifyStore',
  companyDetail: 'companyDetail',
  bankAccount: 'bankAccount',
  bankAccountChangeRequest: 'bankAccountChangeRequest',
  role: 'role',
  adminStaff: 'adminStaff',
  rolePermission: 'rolePermission',
  roleHasPermission: 'roleHasPermission',
  globalPermission: 'globalPermission',
  loginLog: 'loginLog',
  activityLog: 'activityLog',
  country: 'country',
  state: 'state',
  city: 'city',
  warehouse: 'warehouse',
  category: 'category',
  brand: 'brand',
  productRequest: 'productRequest',
  product: 'product',
  productVariant: 'productVariant',
  productSupplierVisibility: 'productSupplierVisibility',
  courierCompany: 'courierCompany',
  highRto: 'highRto',
  badPincode: 'badPincode',
  goodPincode: 'goodPincode',
  supplierProduct: 'supplierProduct',
  supplierProductVariant: 'supplierProductVariant',
  dropshipperProduct: 'dropshipperProduct',
  dropshipperProductVariant: 'dropshipperProductVariant',
  payment: 'payment',
  order: 'order',
  orderItem: 'orderItem',
  rtoInventory: 'rtoInventory',
  supplierOrderPermission: 'supplierOrderPermission',
  raiseTicket: 'raiseTicket',
  ticketOrder: 'ticketOrder',
  dropshipperBanner: 'dropshipperBanner'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
